import { injectable } from "tsyringe";
import winston from "winston";
import { v4 as uuidv4 } from "uuid";
import {
  DynamoDBClient,
  PutItemCommand,
  GetItemCommand,
} from "@aws-sdk/client-dynamodb";
import LoggerProvider from "../../utils/LoggerProvider";
import { ConfigOptions } from "../../config";
import User from "../../auth/User";
import ImageMetadataEntity from "./ImageMetadataEntity";

/** Handle database layer interactions */
@injectable()
export default class ImageMetadataRepository {
  private logger: winston.Logger;

  constructor(
    protected loggerProvider: LoggerProvider,
    protected config: ConfigOptions,
    protected dynamoDBClient: DynamoDBClient
  ) {
    this.logger = loggerProvider.provide("ImageMetadataRepository");
  }

  /** Submit an image request to the job queue */
  public async insert(prompt: string, user: User) {
    const image: ImageMetadataEntity = {
      imageId: uuidv4(),
      prompt: prompt,
      userId: user.id,
      email: user.email,
      requestedAt: new Date(),
      completedAt: null,
    };
    this.logger.info("insert", { image });

    const dynamoItem = this.toDynamoItem(image);
    const command = new PutItemCommand({
      TableName: this.config.imageMetadataTableName,
      Item: dynamoItem,
    });
    await this.dynamoDBClient.send(command);

    return image;
  }

  /** Converts an ImageMetadataEntity to a DynamoDB Item */
  private toDynamoItem(imageMetadata: ImageMetadataEntity) {
    const completedAt =
      imageMetadata.completedAt === null
        ? { NULL: true }
        : { S: imageMetadata.completedAt.toISOString() };

    return {
      imageId: { S: imageMetadata.imageId },
      prompt: { S: imageMetadata.prompt },
      userId: { S: imageMetadata.userId },
      email: { S: imageMetadata.email },
      requestedAt: { S: imageMetadata.requestedAt.toISOString() },
      completedAt: completedAt,
    };
  }

  /** Marks an image as generated by setting the completedAt property. */
  public async markCompleted(imageId: string) {
    const imageMetadata = await this.getById(imageId);

    imageMetadata.completedAt = new Date();

    const dynamoItem = this.toDynamoItem(imageMetadata);
    const command = new PutItemCommand({
      TableName: this.config.imageMetadataTableName,
      Item: dynamoItem,
    });
    await this.dynamoDBClient.send(command);

    return imageMetadata;
  }

  private async getById(imageId: string) {
    const input = {
      TableName: this.config.imageMetadataTableName,
      Key: {
        imageId: { S: imageId },
      },
    };
    const command = new GetItemCommand(input);
    const response = await this.dynamoDBClient.send(command);
    const item = response.Item;

    if (!item) {
      throw new Error(`No item found with imageId ${imageId}`);
    }

    const completedAt = item.completedAt.NULL
      ? null
      : new Date(item.completedAt.S!);

    const image: ImageMetadataEntity = {
      imageId: item.imageId.S!,
      prompt: item.prompt.S!,
      userId: item.userId.S!,
      email: item.email.S!,
      requestedAt: new Date(item.requestedAt.S!),
      completedAt: completedAt,
    };

    return image;
  }
}
